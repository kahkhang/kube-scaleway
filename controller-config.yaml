passwd:
  users:
    - name: core
      ssh_authorized_keys:
        - "$SSH_KEY"
storage:
  files:
    - path: /etc/environment
      filesystem: root
      contents:
        inline: |
          COREOS_PUBLIC_IPV4=${COREOS_PUBLIC_IPV4}
          COREOS_PRIVATE_IPV4=${COREOS_PRIVATE_IPV4}
    - path: /etc/hostname
      filesystem: root
      contents:
        inline: |
          ${HOSTNAME}
    - path: "/etc/traefik/acme/acme.json"
      filesystem: root
      contents:
        inline: |
      mode: 0600
    - path: /home/core/bootstrap.sh
      filesystem: root
      contents:
        inline: |
          #!/usr/bin/env bash
          set -euo pipefail

          CLUSTER_DIR=${CLUSTER_DIR:-cluster}
          SELF_HOST_ETCD=${SELF_HOST_ETCD:-false}
          CLOUD_PROVIDER=${CLOUD_PROVIDER:-}
          NETWORK_PROVIDER=${NETWORK_PROVIDER:-flannel}

          function usage() {
              echo "USAGE:"
              echo "$0: <remote-host>"
              exit 1
          }

          function configure_etcd() {
              [ -f "/etc/systemd/system/etcd-member.service.d/10-etcd-member.conf" ] || {
                  mkdir -p /etc/etcd/tls
                  cp /home/core/assets/tls/etcd-* /etc/etcd/tls
                  mkdir -p /etc/etcd/tls/etcd
                  cp /home/core/assets/tls/etcd/* /etc/etcd/tls/etcd
                  chown -R etcd:etcd /etc/etcd
                  chmod -R u=rX,g=,o= /etc/etcd
                  mkdir -p /etc/systemd/system/etcd-member.service.d
                  cat << EOF > /etc/systemd/system/etcd-member.service.d/10-etcd-member.conf
          [Service]
          Environment="ETCD_IMAGE_TAG=v3.1.8"
          Environment="ETCD_NAME=controller"
          Environment="ETCD_INITIAL_CLUSTER=controller=https://${COREOS_PRIVATE_IPV4}:2380"
          Environment="ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${COREOS_PRIVATE_IPV4}:2380"
          Environment="ETCD_ADVERTISE_CLIENT_URLS=https://${COREOS_PRIVATE_IPV4}:2379"
          Environment="ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379"
          Environment="ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380"
          Environment="ETCD_SSL_DIR=/etc/etcd/tls"
          Environment="ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt"
          Environment="ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt"
          Environment="ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key"
          Environment="ETCD_CLIENT_CERT_AUTH=true"
          Environment="ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt"
          Environment="ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt"
          Environment="ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key"
          EOF
              }
          }

          # Initialize a Master node
          function init_master_node() {
              systemctl daemon-reload
              systemctl stop locksmithd; systemctl mask locksmithd

              if [ "$SELF_HOST_ETCD" = true ] ; then
                  echo "WARNING: THIS IS NOT YET FULLY WORKING - merely here to make ongoing testing easier"
                  etcd_render_flags="--experimental-self-hosted-etcd"
              else
                  etcd_render_flags="--etcd-servers=https://${COREOS_PRIVATE_IPV4}:2379"
              fi

              if [ "$NETWORK_PROVIDER" = "canal" ]; then
                  network_provider_flags="--network-provider=experimental-canal"
              elif [ "$NETWORK_PROVIDER" = "calico" ]; then
                  network_provider_flags="--network-provider=experimental-calico"
              else
                  network_provider_flags="--network-provider=flannel"
              fi

              # Render cluster assets
              /home/core/bootkube render --asset-dir=/home/core/assets ${etcd_render_flags} ${network_provider_flags} \
                --api-servers=https://${COREOS_PRIVATE_IPV4}:6443,https://${COREOS_PUBLIC_IPV4}:6443

              # Move the local kubeconfig into expected location
              chown -R core:core /home/core/assets
              mkdir -p /etc/kubernetes
              cp /home/core/assets/auth/kubeconfig /etc/kubernetes/
              cp /home/core/assets/tls/ca.crt /etc/kubernetes/ca.crt

              # Start etcd.
              if [ "$SELF_HOST_ETCD" = false ] ; then
                  configure_etcd
                  systemctl enable etcd-member; sudo systemctl start etcd-member
              fi

              # Set cloud provider
              sed -i "s/cloud-provider=/cloud-provider=$CLOUD_PROVIDER/" /etc/systemd/system/kubelet.service

              # Start the kubelet
              systemctl enable kubelet; sudo systemctl start kubelet

              # Start bootkube to launch a self-hosted cluster
              /home/core/bootkube start --asset-dir=/home/core/assets
          }

          [ -d "${CLUSTER_DIR}" ] && {
              echo "Error: CLUSTER_DIR=${CLUSTER_DIR} already exists"
              exit 1
          }

          wget -P /home/core https://github.com/kubernetes-incubator/bootkube/releases/download/v0.9.1/bootkube.tar.gz
          tar -xzvf /home/core/bootkube.tar.gz -C /home/core
          mv /home/core/bin/linux/bootkube .
          chmod +x /home/core/bootkube
          rm -rf /home/core/bin

          init_master_node
      mode: 0755
networkd:
  units:
    - name: 00-eth0.network
      contents: |
        [Match]
        Name=eth0

        [Network]
        DHCP=yes
        DNS=10.1.31.38
        DNS=10.1.31.39
        Domains=scaleway.com
        IPv6PrivacyExtensions=false

        [DHCP]
        CriticalConnection=true
systemd:
  units:
    - name: scw-signal-boot.service
      enable: true
      contents: |
        [Unit]
        Description=Signals a successfull boot to Scaleways monitor
        After=network-online.target systemd-networkd-wait-online.service
        Requires=network-online.target systemd-networkd-wait-online.service

        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/bin/curl \
          --fail --silent --show-error --location \
          --connect-timeout 1 --max-time 5 \
          -X PATCH -H 'Content-Type: application/json' \
          http://169.254.42.42/state \
          -d '{"state_detail": "booted"}'

        [Install]
        WantedBy=multi-user.target
    - name: kubelet.service
      enable: true
      contents: |
        [Service]
        Environment=KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube
        Environment=KUBELET_IMAGE_TAG=v1.8.5
        Environment=PATH=/opt/bin/:/usr/bin/:/usr/sbin:$PATH
        Environment="RKT_RUN_ARGS=\
        --uuid-file-save=/var/cache/kubelet-pod.uuid \
        --volume etc-resolv,kind=host,source=/etc/resolv.conf --mount volume=etc-resolv,target=/etc/resolv.conf \
        --volume opt-cni-bin,kind=host,source=/opt/cni/bin --mount volume=opt-cni-bin,target=/opt/cni/bin \
        --volume var-log,kind=host,source=/var/log --mount volume=var-log,target=/var/log \
        --volume var-lib-cni,kind=host,source=/var/lib/cni --mount volume=var-lib-cni,target=/var/lib/cni \
        --insecure-options=image"
        EnvironmentFile=/etc/environment
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/bin/mkdir -p /opt/cni/bin
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests
        ExecStartPre=/bin/mkdir -p /var/lib/cni
        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --allow-privileged \
          --anonymous-auth=false \
          --client-ca-file=/etc/kubernetes/ca.crt \
          --cloud-provider= \
          --cluster_dns=10.3.0.10 \
          --cluster_domain=cluster.local \
          --cni-conf-dir=/etc/kubernetes/cni/net.d \
          --exit-on-lock-contention \
          --hostname-override=${COREOS_PRIVATE_IPV4} \
          --kubeconfig=/etc/kubernetes/kubeconfig \
          --lock-file=/var/run/lock/kubelet.lock \
          --minimum-container-ttl-duration=3m0s \
          --network-plugin=cni \
          --node-labels=node-role.kubernetes.io/master \
          --pod-manifest-path=/etc/kubernetes/manifests \
          --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \
          --require-kubeconfig \
          --volume-plugin-dir=/var/lib/kubelet/volumeplugins
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid
        Restart=always
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
